"""
Параллельная обработка
    По данным n процессорам и m задач определите, для каждой из задач,
каким процессором она будет обработана.
    Вход. Число процессоров n и последовательность чисел
t 0 , . . . , t m−1 , где t i — время, необходимое на обработку i-й
задачи.
    Выход. Для каждой задачи определите, какой процессор
и в какое время начнёт её обрабатывать, предполагая, что
каждая задача поступает на обработку первому освободив-
шемуся процессору.
    В данной задаче ваша цель — реализовать симуляцию параллель-
ной обработки списка задач. Такие обработчики (диспетчеры) есть во
всех операционных системах.
    У вас имеется n процессоров и последовательность из m задач. Для
каждой задачи дано время, необходимое на её обработку. Очеред-
ная работа поступает к первому доступному процессору (то есть если
доступных процессоров несколько, то доступный процессор с мини-
мальным номером получает эту работу).
    Формат входа. Первая строка входа содержит числа n и m. Вторая
содержит числа t 0 , . . . , t m−1 , где t i — время, необходимое на об-
работку i-й задачи. Считаем, что и процессоры, и задачи нуме-
руются с нуля.
    Формат входа. Выход должен содержать ровно m строк: i-я (считая
с нуля) строка должна содержать номер процесса, который по-
лучит i-ю задачу на обработку, и время, когда это произойдёт.
Ограничения. 1 ≤ n ≤ 10 5 ; 1 ≤ m ≤ 10 5 ; 0 ≤ t i ≤ 10 9.

Sample Input:
2 5
1 2 3 4 5

Sample Output:
0 0
1 0
0 1
1 2
0 4

"""

# Решение

def sift_down(processin_ng):
    i = 0
    while 2 * i + 1 < len(processin_ng):
            left = 2 * i + 1
            right = 2 * i + 2
            j = left
            if right < len(processin_ng) and processin_ng[right] < processin_ng[left]:
                j = right
            if processin_ng[i] <= processin_ng[j]:
                break
            processin_ng[i], processin_ng[j] = processin_ng[j], processin_ng[i]
            i = j


def main():
    n, m = map(int, input().split())
    work = [int(i) for i in input().split()]
    assert m == len(work)
    processin_ng = [[0, i]for i in range(n)]
    for i in work:
        print(*processin_ng[0][::-1])
        processin_ng[0][0] += i
        sift_down(processin_ng)


if __name__ == "__main__":
    main()