"""
Скобки в коде
Проверить, правильно ли расставлены скобки в данном коде.
Вход.
Исходный код программы.
Выход.
Проверить, верно ли расставлены скобки. 
Если нет,выдать индекс первой ошибки.
Вы разрабатываете текстовый редактор для программистов и хотите реализовать 
проверкукорректности расстановки скобок. В коде могутвстречаться скобки[]{}(). 
Из них скобки[,{и(считаются открывающими, а соответству-ющими им закрывающими 
скобками являются],}и).В случае, если скобки расставлены неправильно, 
редактор должентакже сообщить пользователю первое место, где обнаружена ошибка.
В первую очередь необходимо найти закрывающую скобку, 
для кото-рой либо нет соответствующей открывающей (например, скобка]встроке “]()”), 
либо же она закрывает не соответствующую ей откры-вающую скобку (пример: “()[}”). 
Если таких ошибок нет, необходи-мо найти первую открывающую скобку, 
для которой нет соответству-ющей закрывающей (пример: скобка(в строке “{}([]”).
Помимо скобок, исходный код может содержать символы латин-ского алфавита, 
цифры и знаки препинания.Формат входа.
Строка s[1. . . n], состоящая из заглавных и пропис-ных букв латинского алфавита, 
цифр, знаков препинания и ско-бок из множества[]{}().
Формат выхода.Если скобки в s расставлены правильно, выведитестроку “Success". 
В противном случае выведите индекс (исполь-зуя индексацию с единицы) 
первой закрывающей скобки, для которой нет соответствующей открывающей. 
Если такой нет, выведите индекс первой открывающей скобки, 
для которой нетсоответствующей закрывающей.

Sample Input 1:
([](){([])})

Sample Output 1:
Success

Sample Input 2:
()[]}

Sample Output 2:
5

Sample Input 3:
{{[()]]

Sample Output 3:
7
"""

# Решение

def is_braces_sequence_correct(n):
    d_braces = {']':'[',')':'(','}':'{'}
    stack = []
    for i in range(len(n)):
        if n[i] not in '{[()]}':
            continue
        if n[i] in '({[':
            stack.append(n[i])
            stack.append(i + 1)
        elif stack != [] and stack[-2] == d_braces[n[i]]:
            stack.pop()
            stack.pop()
        else:
            return i + 1
    return 'Success' if not stack else stack[-1]

def main():
    n = input()
    print(is_braces_sequence_correct(n))  

if __name__ == '__main__':
    main()